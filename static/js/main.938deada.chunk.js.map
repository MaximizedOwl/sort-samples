{"version":3,"sources":["util/check.js","sort/bubbleSort.js","sort/insertSort.js","sort/selectionSort.js","App.js","util/dataGenerator.js","util/randomization.js","reportWebVitals.js","index.js"],"names":["check","correctNumList","sortedList","index","length","bubbleSort","ascNumList","randomNumList","startTime","performance","now","i","j","tmp","endTime","console","log","insertSort","SortedList","push","splice","selectionSort","tmpMinIndex","App","dataGenerator","numList","k","Math","floor","random","randomization","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8JAKaA,G,UAAQ,SAACC,EAAgBC,GACpC,IAAK,IAAIC,EAAQ,EAAGA,EAAQF,EAAeG,OAAQD,IAEjD,GAAMF,EAAeE,KAAWD,EAAWC,GACzC,OAAO,EAIX,OAAO,ICXIE,EAAa,SAACC,EAAYC,GAOrC,IANA,IAAMC,EAAYC,YAAYC,MAMrBC,EAAI,EAAGA,EAAIJ,EAAcH,OAAS,EAAGO,IAE5C,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcH,OAAS,EAAGQ,IAE5C,GAAIL,EAAcK,GAAKL,EAAcK,EAAI,GAAI,CAE3C,IAAMC,EAAMN,EAAcK,GAC1BL,EAAcK,GAAKL,EAAcK,EAAI,GACrCL,EAAcK,EAAI,GAAKC,EAK7B,IAAMC,EAAUL,YAAYC,MAE5B,OAAIV,EAAMM,EAAYC,IACpBQ,QAAQC,IAAI,QAAUF,EAAUN,IACzB,QAAUM,EAAUN,GAAa,SAEjC,UC1BES,EAAa,SAACX,EAAYC,GACrC,IAAMC,EAAYC,YAAYC,MAQ1BQ,EAAa,GAGjBA,EAAWC,KAAKZ,EAAc,IAG9B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAcH,OAAQO,IAMxC,GAAIO,EAAWA,EAAWd,OAAS,GAAKG,EAAcI,GACpDO,EAAWC,KAAKZ,EAAcI,SAMhC,IAAK,IAAIC,EAAI,EAAGA,EAAIM,EAAWd,OAAQQ,IAIrC,GAAIM,EAAWN,GAAKL,EAAcI,GAAI,CAEpCO,EAAWE,OAAOR,EAAG,EAAGL,EAAcI,IAEtC,MAKN,IAAMG,EAAUL,YAAYC,MAE5B,OAAIV,EAAMM,EAAYC,IACpBQ,QAAQC,IAAI,QAAUF,EAAUN,IACzB,QAAUM,EAAUN,GAAa,SAEjC,UC/CEa,EAAgB,SAACf,EAAYC,GAaxC,IAZA,IAQIe,EAREd,EAAYC,YAAYC,MAYrBC,EAAI,EAAGA,EAAIJ,EAAcH,OAAQO,IAAK,CAC7CW,EAAcX,EAId,IAAK,IAAIC,EAAID,EAAGC,EAAIL,EAAcH,OAAQQ,IAEpCL,EAAce,GAAef,EAAcK,KAC7CU,EAAcV,GAMlB,IAAMC,EAAMN,EAAce,GAC1Bf,EAAce,GAAef,EAAcI,GAC3CJ,EAAcI,GAAKE,EAKrB,IAAMC,EAAUL,YAAYC,MAE5B,OAAIV,EAAMM,EAAYC,IACpBQ,QAAQC,IAAI,QAAUF,EAAUN,IACzB,QAAUM,EAAUN,GAAa,SAEjC,U,OCRIe,MA3Bf,WACE,IAAMjB,ECRqB,WAK3B,IAHA,IACIA,EAAa,GAERH,EAAQ,EAAGA,EAHH,IAGqBA,IACpCG,EAAWa,KAAKhB,GAGlB,OAAOG,EDDYkB,GACbjB,EENqB,SAACkB,GAE5B,IAAK,IAAId,EAAIc,EAAQrB,OAAQ,EAAIO,EAAGA,IAAK,CACvC,IAAIe,EAAIC,KAAKC,MAAMD,KAAKE,SAAWlB,GADI,EAER,CAACc,EAAQd,EAAI,GAAIc,EAAQC,IAAvDD,EAAQC,GAF8B,KAE1BD,EAAQd,EAAI,GAFc,KAQzC,OAFsBc,EFFAK,CAAcxB,GAEpC,OACE,qBAAKyB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wFADF,gaAQE,sEACC1B,EAAWC,EAAYC,GACxB,gEACCc,EAAcf,EAAYC,GAC3B,gEACCU,EAAWX,EAAYC,GACxB,4EACC,2BGhBMyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.938deada.chunk.js","sourcesContent":["/* \n  昇順にソートできているかの判定\n  成功：true\n  失敗：false\n*/\nexport const check = (correctNumList, sortedList) => {\n  for (let index = 0; index < correctNumList.length; index++) {\n    // indexを添字としたときの、昇順リスト（正解）の値とチェック対象の値を突き合わせて、falseになる場合に分岐に入る判定\n    if (!(correctNumList[index] === sortedList[index])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { check } from '../util/check';\n\nexport const bubbleSort = (ascNumList, randomNumList) => {\n  const startTime = performance.now(); // 開始時間\n\n  /* \n    ソート処理\n  */\n  // (要素数 - 1) 回分、繰り返す\n  for (let i = 0; i < randomNumList.length - 1; i++) {\n    // (要素数 - 1) 回分、繰り返す\n    for (let j = 0; j < randomNumList.length - 1; j++) {\n      // 入れ替えるかどうかの判定。添字が大きいほうが中の数字が小さければswap処理実施。\n      if (randomNumList[j] > randomNumList[j + 1]) {\n        // 添字の大きい数字を一時変数に入れて入れ替える。\n        const tmp = randomNumList[j];\n        randomNumList[j] = randomNumList[j + 1];\n        randomNumList[j + 1] = tmp;\n      }\n    }\n  }\n\n  const endTime = performance.now(); // 終了時間\n\n  if (check(ascNumList, randomNumList)) {\n    console.log('OK! ' + (endTime - startTime));\n    return 'OK! ' + (endTime - startTime) + ' (ms)';\n  } else {\n    return 'NG...!';\n  }\n};\n","import { check } from '../util/check';\n\nexport const insertSort = (ascNumList, randomNumList) => {\n  const startTime = performance.now(); // 開始時間\n\n  /* \n    ソート処理\n    小さい順に並び替える。\n  */\n\n  // 整列済みの配列を用意\n  let SortedList = [];\n\n  // 添字の0をまずは整列済みとみなす\n  SortedList.push(randomNumList[0]);\n\n  // randomNumList[1]移行の数の挿入処理開始\n  for (let i = 1; i < randomNumList.length; i++) {\n    // console.log(SortedList);\n    // console.log('i: ' + i);\n\n    // 整列済みの配列の一番大きい数字よりも今回比較する数字が大きいかどうかの判定\n    // 整列済みの配列の一番大きい数字よりも今回比較する数字が大きければ、一番右に挿入して次のループへ移行\n    if (SortedList[SortedList.length - 1] < randomNumList[i]) {\n      SortedList.push(randomNumList[i]);\n      continue;\n    }\n\n    // 「整列済みの配列の一番大きい数字よりも今回比較する数字が大きいかどうかの判定」でtrueにならなかった場合こちらの処理が走る\n    // 適切な位置の判定をする。\n    for (let j = 0; j < SortedList.length; j++) {\n      // console.log('i: ' + i + ' j: ' + j);\n\n      // 添字0の値から順に比べていって、SortedList[j] の値のほうが大きくなったらその位置を見て挿入する。\n      if (SortedList[j] > randomNumList[i]) {\n        // 挿入処理\n        SortedList.splice(j, 0, randomNumList[i]);\n        // 適切な位置が見つかったのでループを抜ける\n        break;\n      }\n    }\n  }\n\n  const endTime = performance.now(); // 終了時間\n\n  if (check(ascNumList, randomNumList)) {\n    console.log('OK! ' + (endTime - startTime));\n    return 'OK! ' + (endTime - startTime) + ' (ms)';\n  } else {\n    return 'NG...!';\n  }\n};\n","import { check } from '../util/check';\n\nexport const selectionSort = (ascNumList, randomNumList) => {\n  const startTime = performance.now(); // 開始時間\n\n  /* \n    ソート処理\n    （最小から整列させる）\n  */\n\n  // 暫定での最小値が入っている配列の添字を入れるための変数\n  let tmpMinIndex;\n\n  // 一回交換が終わったら次の値に移る。\n  // 最小値から並べる場合、最後の値は自動的に最大値になるので繰り返す数は (要素数 - 1) になる。\n  for (let i = 0; i < randomNumList.length; i++) {\n    tmpMinIndex = i;\n\n    // console.log('ループ前 tmpMinIndex: ' + tmpMinIndex);\n\n    for (let j = i; j < randomNumList.length; j++) {\n      // jに入っている値が一時変数に入っている添字の値より小さければ一時変数に入る添字の変更実施\n      if (randomNumList[tmpMinIndex] > randomNumList[j]) {\n        tmpMinIndex = j;\n      }\n    }\n\n    // console.log('ループ後 tmpMinIndex: ' + tmpMinIndex);\n\n    const tmp = randomNumList[tmpMinIndex];\n    randomNumList[tmpMinIndex] = randomNumList[i];\n    randomNumList[i] = tmp;\n\n    // console.log('sort: ' + (i + 1) + '回目： ' + randomNumList);\n  }\n\n  const endTime = performance.now(); // 終了時間\n\n  if (check(ascNumList, randomNumList)) {\n    console.log('OK! ' + (endTime - startTime));\n    return 'OK! ' + (endTime - startTime) + ' (ms)';\n  } else {\n    return 'NG...!';\n  }\n};\n","import './App.css';\nimport { bubbleSort } from './sort/bubbleSort';\nimport { insertSort } from './sort/insertSort';\nimport { selectionSort } from './sort/selectionSort';\nimport { dataGenerator } from './util/dataGenerator';\nimport { randomization } from './util/randomization';\n\nfunction App() {\n  const ascNumList = dataGenerator();\n  const randomNumList = randomization(ascNumList);\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <h2>ソートのサンプル集</h2>\n\n        {`\n          0〜9999の数字をランダムに生成して配列に入れ、それらを並び替える速度を計測したもの。\n          ブラウザで更新するたびに配列内の並びは変わる。\n          `}\n\n        <h4>バブルソート</h4>\n        {bubbleSort(ascNumList, randomNumList)}\n        <h4>選択ソート</h4>\n        {selectionSort(ascNumList, randomNumList)}\n        <h4>挿入ソート</h4>\n        {insertSort(ascNumList, randomNumList)}\n        <h4>クイックソート</h4>\n        {'未実装'}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const dataGenerator = () => {\n  // 1~10000までの配列を生成\n  const dataSize = 30000;\n  let ascNumList = [];\n\n  for (let index = 0; index < dataSize; index++) {\n    ascNumList.push(index);\n  }\n\n  return ascNumList;\n};\n","/* \n  昇順の数字の配列の順番のランダム化\n*/\nexport const randomization = (numList) => {\n  // ランダム化処理\n  for (let i = numList.length; 1 < i; i--) {\n    let k = Math.floor(Math.random() * i);\n    [numList[k], numList[i - 1]] = [numList[i - 1], numList[k]];\n  }\n\n  // わかりやすいように入れ直し\n  const randomNumList = numList;\n\n  return randomNumList;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}